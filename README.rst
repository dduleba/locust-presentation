:title: Pythonowa Szarańcza

.. :skip-help: true

:css: css/my.css


.. header::

    .. image:: img/logo.png
        :width: 80
        :height: 80
        :align: left

    Pythonowa szarańcza

.. footer::
    NOKIA


----

Darek Duleba

----

=========== ========================    ======
O mnie
=========== ========================    ======
rodzina     10-ty rok małżeństwa

            2 synów - Filip i Damian

praca       13-ty rok pracy             Specjalizuje się w autmatyzacji testów i nie tylko

            - ALU (6+)

            - Genesys (5+)

            - Nokia (1+)

sport       Triathlon                    początki zabawy z triathlonem

            - pływanie

            - jazda na rowerze

            - bieganie

open source dduleba_github_             kontrybucje do radish-bdd_

                                        wdna_ (webowe narzędzia wspierające analizy dna)

                                        locust_exporter_

                                        locust_dockprom_ - dockprom + locust exporter

=========== ========================    ======

* bierzący status na kwiecień 2019

----

Performance testing (Testy wydajnościowe)
=========================================

* Proces testowania mający na celu określenie wydajności oprogramowania.

======================= =================================================== =================================================
Rodzaj testowania       Opis                                                Przypadki testowe w praktyce
======================= =================================================== =================================================
endurance (stabilności) Skupienie na stabilności systemu w przedziala czasu 72 godzinne testy przy stałym obciążeniu.
                        Weryfikuje brak problemów z zasobami (np.
                        wycieki pamięci, połącenia do bazy, pula wątków)    scenariusze użytkowników bez przeciążania systemu


stress (przeciążające)  Typ testowania wydajnościowego wykonywany,          5 minutowe testy skupiające się na konkretnym
                        by określić jak system lub jego moduł pracuje       obszarze. Ich celem jest określenie maksymalnej
                        na przewidywanej lub wyspecyfikowanej granicy       wydajności przy ograniczonych zasobach
                        lub poza nią lub też przy ograniczonym dostępie
                        do pamięci lub serwera.

======================= =================================================== =================================================

sjsi_sylabus_

istqb_performance_testing_

Rodzaje testowania wydajnościowego:

Load (obciążeniowe), Scalability (skalowalności), Spike, Concurrency (równoległości przetwarzania), Capacity

.. note::


    Types of performance testing:
        * Load Testing (Testowanie obciążeniowe)
        * Stress Testing (Testowanie przeciążające)
        * Scalability Testing (Testowanie skalowalności)
        * Spike Testing
        * Endurance Testing
        * Concurrency Testing (testowanie równoległości przetwarzania)
        * Capacity Testing

    * Types of performance tests:
        * static testing
        * dynamic testing

    Performance Testing
    Performance testing is an umbrella term including any kind of testing focused on
    performance (responsiveness) of the system or component under different volumes of
    load.

    Load Testing
    Load testing focuses on the ability of a system to handle increasing levels of anticipated
    realistic loads resulting from transaction requests generated by controlled numbers of
    concurrent users or processes.

    Stress Testing
    Stress testing focuses on the ability of a system or component to handle peak loads
    that are at or beyond the limits of its anticipated or specified workloads. Stress
    testing is also used to evaluate a system’s ability to handle reduced availability of
    resources such as accessible computing capacity, available bandwidth, and memory.

    Scalability Testing
    Scalability testing focuses on the ability of a system to meet future efficiency
    requirements which may be beyond those currently required. The objective of these
    tests is to determine the system’s ability to grow (e.g., with more users, larger amounts
    of data stored) without violating the currently specified performance requirements or
    failing. Once the limits of scalability are known, threshold values can be set and
    monitored in production to provide a warning of problems which may be about to arise..
    In addition the production environment may be adjusted with appropriate amounts of
    hardware.

    Spike Testing
    Spike testing focuses on the ability of a system to respond correctly to sudden bursts
    of peak loads and return afterwards to a steady state.

    Endurance Testing
    Endurance testing focuses on the stability of the system over a time frame specific to
    the system’s operational context. This type of testing verifies that there are no resource
    capacity problems (e.g., memory leaks, database connections, thread pools) that may
    eventually degrade performance and/or cause failures at breaking points.

    Concurrency Testing
    Concurrency testing focuses on the impact of situations where specific actions occur
    simultaneously (e.g., when large numbers of users log in at the same time).
    Concurrency issues are notoriously difficult to find and reproduce, particularly when
    the problem occurs in an environment where testing has little or no control, such as
    production.

    Capacity Testing
    Capacity testing determines how many users and/or transactions a given system will
    support and still meet the stated performance objectives. These objectives may also
    be stated with regard to the data volumes resulting from the transactions.

----

Narzędzia do testów wydajnościowych
===================================


================    =======
Nazwa               Opis
================    =======
Gatling_            Open sourceowe narzędzie do genorowania obciążenia.

                    Potężne narzędzie z możliwością nagrywania rcuhu webowego z kolorowymi raportami.

locust_             Open sourceowe narzędzie do genorowania obciążenia.

                    Umożliwia definicje zachowania użytkownika

                    Scenariusze użytkownika w kodzie **python**'owym

                    - Skalowalny
                        - tysiące użytkowników na jednej maszynie (event-based)
                    - Rozporoszony
                        - uruchomienie na wielu maszynach umożliwia symulowanie miliony równoczesnych użytkowników


locust_dockprom_    Rozwiązanie do monitorowania locust'a, hostów oraz konterów Dockerowych

                    - **Prometheus** - Monitoring system & time series database
                    - **Grafana** - The open platform for analytics and monitoring
                    - **cAdvisor** - Analyzes resource usage and performance characteristics of running containers.
                    - NodeExporter - Prometheus exporter for machine metrics
                    - AlertManager
                    - **Locust Exporter** - Prometheus exporter for locust metrics
================    =======

NOTE: Tabela zawiera podzbiór narzędzi wykorzystywanych w bierzącym projekcie

----

locust w virtualenvie
=====================



.. image:: img/locust_installation.gif
    :align: left
    :width: 520px
    :height: 360px

Tworzenie virtualenv'a - virtualenvwrapper_

.. code-block:: bash

    $ pip install virtualenv
    $ pip install virtualenvwrapper
    $ mkvirtualenv -p python3 locust
    (locust)$

Instalacja locusta

.. code-block::

    (locust)$ pip install locustio

Wczytanie virtualnego środowiska

.. code-block::

    $ source virtualenvwrapper.sh
    $ workon locust
    (locust)$ locust --help

dokumentacja instalacji_locusta_

----

locust w dockerze
=================

running_docker_with_locust_

Docker file z locustio

.. code-block:: Docker

    FROM python:3.6.6-alpine3.8

    RUN apk --no-cache add g++ \
          && apk --no-cache add zeromq-dev \
          && pip install locustio pyzmq

    EXPOSE 8089 5557 5558

    ENTRYPOINT ["/usr/local/bin/locust"]

.. code-block:: sh

    $ cd ~/git/locust/
    $ docker build --tag locustio/locust .

Docker z wykorzystaniem za pomocą exec'a

.. code-block:: Docker

    FROM locustio/locust

    WORKDIR /locust

    env PYTHONPATH /locust

    ENTRYPOINT []
    CMD ["tail","-f","/dev/null"]

.. code-block:: sh

    $ cd ~/git/locust-presentation/examples/packaging
    $ docker build --tag locustio/locust .
    $ cd ~/git/locust-presentation
    $ docker run --cpus 1.0 --network host -d \
        --name locust -p 8089:8089 \
        --mount src="$(pwd)",target=/locust,type=bind dduleba/locust

----

.. image:: img/flaskr.gif
    :align: left

Test App
========

flask flaskr_ example
---------------------

.. code-block:: sh

    $ export FLASK_APP=flaskr
    $ export FLASK_ENV=development
    $ flask init-db
    $ flask run

flaskr w dockerze
-----------------

Utwórz Dockerfile w flask examples\\tutorial

.. code-block:: Docker

    FROM python:3-alpine

    ADD . /app
    WORKDIR /app
    RUN pip install -e .
    ENV FLASK_APP flaskr
    ENV FLASK_ENV development
    RUN flask init-db

    ENTRYPOINT ["flask"]
    CMD ["run","--host","0.0.0.0"]

.. code-block:: sh

    $ docker build --tag flaskr:alpine .
    $ docker run \
        --cpus 1.0 \
        --restart unless-stopped \
        -d \
        -p 5000:5000 \
        --name flaskr \
        flaskr:alpine

----

Przygotowanie zapytań
=====================

.. image:: img/flaskr_get.gif
    :align: left




----

Przygotowanie zapytań
=====================

.. image:: img/flaskr_register_user.gif
    :align: left



----

flaskr - przykładowy scenariusz
===============================

Requests_ - HTTP dla ludzi
--------------------------

.. code-block:: Python

    from random import random

    import requests

    # Initial condition
    user_id = random()
    username = 'test_user_{}'.format(user_id)
    userpassword = 'test_user_pass_{}'.format(user_id)

    # Pobranie głównej strony
    session = requests.Session()
    r = session.get('http://localhost:5000/')
    print('get status code: ', r.status_code)
    print('get content: ', r.content)

    # rejestracja użytkownika - HTTP post request
    r = session.post('http://localhost:5000/auth/register',
                     data={'username': username,
                           'password': userpassword})
    print('register status code: ', r.status_code)

    r = session.post('http://localhost:5000/auth/login',
                     data={'username': username,
                           'password': userpassword})
    print('login status code: ', r.status_code)
    print('login cookies: ', session.cookies)

    r = session.post('http://localhost:5000/create',
                     data={'title': 'post example by {}'.format(username),
                           'body': 'witam na ŁuczniczQA meetup'})
    print('post add status code: ', r.status_code)

.. code-block::

    get status code:  200
    get content:  b'<!doctype html>\n<title>Posts - Flaskr</title>\n<link rel="stylesheet" href="/stat'
    register status code:  200
    login status code:  200
    login cookies:  <RequestsCookieJar[<Cookie session=eyJ1c2VyX2lkIjo5fQ.XKUERw.lIoPgp32joW1ELnCrfcGumqaunw for localhost.local/>]>
    post add status code:  200

----

Get request
===========

skrypt
------

.. code-block:: Python

    session = requests.Session()
    r = session.get('http://localhost:5000/')
    print('get status code: ', r.status_code)
    print('get content: ', r.content[:80])

locust
------
locust_host_attribute_

locust_usng_HTTP_client_

Każda instancja TaskSet'a (HTTPLocust'a) zawiera atrybut client HttpSession. Klasa HttpSession dziedziczy z requests.Session


.. code-block:: Python

    from locust import HttpLocust, TaskSet, task

    class IndexTaskSet(TaskSet):
        @task()
        def index(self):
            self.client.get("/")


    class IndexLocust(HttpLocust):
        task_set = IndexTaskSet
        min_wait = 5000
        max_wait = 5000
        host='http://127.0.0.1:5000'


----

Post request
============

.. code-block:: Python

    from locust import HttpLocust, TaskSet, task


    class RegisterTaskSet(TaskSet):

        def on_start(self):
            self.prefix = id(self)
            self.user_id = 0
            print(self.prefix)

        @task()
        def register(self):
            self.user_id += 1
            self.client.post(
                "/auth/register",
                data={
                    'username': 'test_user_{}_{}'.format(self.prefix, self.user_id),
                    'password': 'test_password_{}_{}'.format(self.prefix, self.user_id)
                }
            )


    class IndexLocust(HttpLocust):
        task_set = RegisterTaskSet
        min_wait = 5000
        max_wait = 5000
        host = 'http://127.0.0.1:5000'


----

Task sequence
=============

.. code-block:: Python

    import time

    from locust import HttpLocust, task, TaskSequence, seq_task


    class LoggedUserSequence(TaskSequence):

        def on_start(self):
            self.prefix = id(self)
            self.user_id = 0
            print(self.prefix)
            self.user_name = 'test_user_{}_{}'.format(self.prefix, self.user_id)
            self.user_password = 'test_password_{}_{}'.format(self.prefix, self.user_id)
            self.client.post(
                "/auth/register",
                data={
                    'username': self.user_name,
                    'password': self.user_password
                }
            )

        @seq_task(1)
        def login(self):
            self.client.post(
                "/auth/login",
                data={
                    'username': self.user_name,
                    'password': self.user_password
                }
            )

        @seq_task(2)
        @task(5)
        def new(self):
            self.client.post(
                "/create",
                data={
                    'title': '{}: {} title'.format(self.user_name, self.user_id),
                    'body': "my body text"
                }
            )

    ...

----

Flaskr w docker'ze
==================

.. code-block:: Docker

    FROM ubuntu:latest
    RUN apt-get update -y
    RUN apt-get install -y python-pip python-dev build-essential

    ADD . /app
    WORKDIR /app
    RUN pip install -e .
    ENV FLASK_APP flaskr
    ENV FLASK_ENV development
    RUN flask init-db

    ENTRYPOINT ["flask"]
    CMD ["run","--host","0.0.0.0"]

.. code-block:: bash

    $ docker build --tag flaskr .
    $ docker run --name flaskr -p 5001:5000 flaskr

----

Monitorowanie applikacji
========================

dockprom_

* A monitoring solution for Docker hosts and containers

.. code-block:: bash

    $ git clone https://github.com/stefanprodan/dockprom
    $ cd dockprom
    $ ADMIN_USER=admin ADMIN_PASSWORD=admin docker-compose up -d


----

Monitorowanie locust'a
======================

locust_exporter_ dla prometheus_'a

lub locust_dockprom_

.. image:: img/locust.png
    :width: 950
    :height: 450




----

Locust w docker'ze
==================

locust_docker_

----

Definicja własnego klient'a
===========================

https://docs.locust.io/en/stable/testing-other-systems.html

----

.. _hovercraft: https://hovercraft.readthedocs.io/en/latest/presentations.html
.. _virtualenvwrapper: https://virtualenvwrapper.readthedocs.io/en/latest/
.. _instalacji_locusta: https://docs.locust.io/en/latest/installation.html
.. _locust: https://locust.io/
.. _locustfile: https://docs.locust.io/en/stable/writing-a-locustfile.html
.. _locust_local_url: http://localhost:8089/
.. _locust_host_attribute: https://docs.locust.io/en/stable/writing-a-locustfile.html#the-host-attribute
.. _locust_usng_HTTP_client: https://docs.locust.io/en/stable/writing-a-locustfile.html#using-the-http-client
.. _flaskr: http://flask.pocoo.org/docs/1.0/tutorial/
.. _Requests: http://docs.python-requests.org/en/master/user/quickstart/
.. _dockprom: https://github.com/stefanprodan/dockprom
.. _locust_docker: https://docs.locust.io/en/latest/running-locust-docker.html
.. _locust_exporter: https://github.com/dduleba/locust_exporter
.. _locust_dockprom: https://github.com/dduleba/locust-dockprom
.. _prometheus: https://prometheus.io/
.. _sjsi_sylabus: https://sjsi.org/download/3319/
.. _istqb_performance_testing: https://www.istqb.org/documents/ISTQB%20CTFL-PT%20Syllabus%202018%20GA.pdf
.. _Gatling: https://gatling.io/
.. _dduleba_github: https://github.com/dduleba
.. _wdna: https://github.com/dduleba/wdna
.. _radish-bdd: https://github.com/radish-bdd/radish
.. _running_docker_with_locust: https://docs.locust.io/en/latest/running-locust-docker.html